{"name": "test_user_login_fail_by_kdt", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression //*[@id=\"login-password\"]\"] because of the following error:\nSyntaxError: Failed to execute 'evaluate' on 'Document': The string '//*[@id=\"login-password\"]\"]' is not a valid XPath expression.\n  (Session info: chrome=114.0.5735.198)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00F5A813+48355]\n\t(No symbol) [0x00EEC4B1]\n\t(No symbol) [0x00DF5358]\n\t(No symbol) [0x00DF87A1]\n\t(No symbol) [0x00DF99E1]\n\t(No symbol) [0x00DF9A80]\n\t(No symbol) [0x00E2061C]\n\t(No symbol) [0x00E20B3B]\n\t(No symbol) [0x00E4E232]\n\t(No symbol) [0x00E3A784]\n\t(No symbol) [0x00E4C922]\n\t(No symbol) [0x00E3A536]\n\t(No symbol) [0x00E182DC]\n\t(No symbol) [0x00E193DD]\n\tGetHandleVerifier [0x011BAABD+2539405]\n\tGetHandleVerifier [0x011FA78F+2800735]\n\tGetHandleVerifier [0x011F456C+2775612]\n\tGetHandleVerifier [0x00FE51E0+616112]\n\t(No symbol) [0x00EF5F8C]\n\t(No symbol) [0x00EF2328]\n\t(No symbol) [0x00EF240B]\n\t(No symbol) [0x00EE4FF7]\n\tBaseThreadInitThunk [0x76927D59+25]\n\tRtlInitializeExceptionChain [0x77AEB74B+107]\n\tRtlClearBits [0x77AEB6CF+191]", "trace": "anonymous_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f9883c62c434eb23630edcd85c7fdef8\")>\n\n    def test_user_login_fail_by_kdt(anonymous_driver):\n        anonymous_driver.get('http://47.107.116.139/fangwei/')\n        wd = KeyWord(anonymous_driver)\n        wd.click('/html/body/div[2]/div/div[2]/div[1]/div/a')\n        wd.input('//*[@id=\"login-email-address\"]', \"admin\")\n>       wd.input('//*[@id=\"login-password\"]\"]', \"13131314\")\n\ntests\\test_reception.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ncommons\\kdt.py:38: in input\n    el = self.find_element(By.XPATH, loc)\ncommons\\kdt.py:26: in find_element\n    self.wait(f)  # 通过self对象，调用类方法出发显式等待\ncommons\\kdt.py:10: in wait\n    return WebDriverWait(self.driver, 5).until(func)\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:86: in until\n    value = method(self._driver)\ncommons\\kdt.py:15: in f\n    if driver.find_element(by, value).text:\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:831: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C0458974C0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector: Unable to locate an elemen...dInitThunk [0x76927D59+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77AEB74B+107]\\\\n\\\\tRtlClearBits [0x77AEB6CF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression //*[@id=\"login-password\"]\"] because of the following error:\nE       SyntaxError: Failed to execute 'evaluate' on 'Document': The string '//*[@id=\"login-password\"]\"]' is not a valid XPath expression.\nE         (Session info: chrome=114.0.5735.198)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00F5A813+48355]\nE       \t(No symbol) [0x00EEC4B1]\nE       \t(No symbol) [0x00DF5358]\nE       \t(No symbol) [0x00DF87A1]\nE       \t(No symbol) [0x00DF99E1]\nE       \t(No symbol) [0x00DF9A80]\nE       \t(No symbol) [0x00E2061C]\nE       \t(No symbol) [0x00E20B3B]\nE       \t(No symbol) [0x00E4E232]\nE       \t(No symbol) [0x00E3A784]\nE       \t(No symbol) [0x00E4C922]\nE       \t(No symbol) [0x00E3A536]\nE       \t(No symbol) [0x00E182DC]\nE       \t(No symbol) [0x00E193DD]\nE       \tGetHandleVerifier [0x011BAABD+2539405]\nE       \tGetHandleVerifier [0x011FA78F+2800735]\nE       \tGetHandleVerifier [0x011F456C+2775612]\nE       \tGetHandleVerifier [0x00FE51E0+616112]\nE       \t(No symbol) [0x00EF5F8C]\nE       \t(No symbol) [0x00EF2328]\nE       \t(No symbol) [0x00EF240B]\nE       \t(No symbol) [0x00EE4FF7]\nE       \tBaseThreadInitThunk [0x76927D59+25]\nE       \tRtlInitializeExceptionChain [0x77AEB74B+107]\nE       \tRtlClearBits [0x77AEB6CF+191]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: InvalidSelectorException"}, "start": 1687956702435, "stop": 1687956711149, "uuid": "3dec6ad5-c57d-4e1d-a7f7-be4d0d14f11a", "historyId": "aa465cd190989c56b0daff68259e4943", "testCaseId": "aa465cd190989c56b0daff68259e4943", "fullName": "tests.test_reception#test_user_login_fail_by_kdt", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_reception"}, {"name": "host", "value": "ltq"}, {"name": "thread", "value": "34904-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_reception"}]}